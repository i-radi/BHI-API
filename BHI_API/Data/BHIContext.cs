// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using BHI_API.Models;

namespace BHI_API.Data
{
    public partial class BHIContext : DbContext
    {
        public BHIContext()
        {
        }

        public BHIContext(DbContextOptions<BHIContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Ins_Course> Ins_Courses { get; set; }
        public virtual DbSet<Instructor> Instructors { get; set; }
        public virtual DbSet<Stud_Course> Stud_Courses { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Topic> Topics { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=BHI;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Course>(entity =>
            {
                entity.Property(e => e.Crs_Id).ValueGeneratedNever();

                entity.HasOne(d => d.Top)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.Top_Id)
                    .HasConstraintName("FK_Course_Topic");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.Property(e => e.Dept_Id).ValueGeneratedNever();

                entity.HasOne(d => d.Dept_ManagerNavigation)
                    .WithMany(p => p.Departments)
                    .HasForeignKey(d => d.Dept_Manager)
                    .HasConstraintName("FK_Department_Instructor");
            });

            modelBuilder.Entity<Ins_Course>(entity =>
            {
                entity.HasKey(e => new { e.Ins_Id, e.Crs_Id });

                entity.HasOne(d => d.Crs)
                    .WithMany(p => p.Ins_Courses)
                    .HasForeignKey(d => d.Crs_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ins_Course_Course");

                entity.HasOne(d => d.Ins)
                    .WithMany(p => p.Ins_Courses)
                    .HasForeignKey(d => d.Ins_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ins_Course_Instructor");
            });

            modelBuilder.Entity<Instructor>(entity =>
            {
                entity.Property(e => e.Ins_Id).ValueGeneratedNever();

                entity.HasOne(d => d.Dept)
                    .WithMany(p => p.Instructors)
                    .HasForeignKey(d => d.Dept_Id)
                    .HasConstraintName("FK_Instructor_Department");
            });

            modelBuilder.Entity<Stud_Course>(entity =>
            {
                entity.HasKey(e => new { e.Crs_Id, e.St_Id });

                entity.HasOne(d => d.Crs)
                    .WithMany(p => p.Stud_Courses)
                    .HasForeignKey(d => d.Crs_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stud_Course_Course");

                entity.HasOne(d => d.St)
                    .WithMany(p => p.Stud_Courses)
                    .HasForeignKey(d => d.St_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stud_Course_Student");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.Property(e => e.St_Id).ValueGeneratedNever();

                entity.Property(e => e.St_Lname).IsFixedLength();

                entity.HasOne(d => d.Dept)
                    .WithMany(p => p.Students)
                    .HasForeignKey(d => d.Dept_Id)
                    .HasConstraintName("FK_Student_Department");

                entity.HasOne(d => d.St_superNavigation)
                    .WithMany(p => p.InverseSt_superNavigation)
                    .HasForeignKey(d => d.St_super)
                    .HasConstraintName("FK_Student_Student");
            });

            modelBuilder.Entity<Topic>(entity =>
            {
                entity.Property(e => e.Top_Id).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}